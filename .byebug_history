c
conversions.keys
conversions
replacements
results.include?("ORnPBPMgArCaCaCaSiThCaCaSiThCaCaPBSiRnFArRnFArCaCaSiThCaCaSiThCaCaCaCaCaCaSiRnFYFArSiRnMgArCaSiRnPTiTiBFYPBFArSiRnCaSiRnTiRnFArSiAlArPTiBPTiRnCaSiAlArCaPTiTiBPMgYFArPTiRnFArSiRnCaCaFArRnCaFArCaSiRnSiRnMgArFYCaSiRnMgArCaCaSiThPRnFArPBCaSiRnMgArCaCaSiThCaSiRnTiMgArFArSiThSiThCaCaSiRnMgArCaCaSiRnFArTiBPTiRnCaSiAlArCaPTiRnFArPBPBCaCaSiThCaPBSiThPRnFArSiThCaSiThCaSiThCaPTiBSiRnFYFArCaCaPRnFArPBCaCaPBSiRnTiRnFArCaPRnFArSiRnCaCaCaSiThCaRnCaFArYCaSiRnFArBCaCaCaSiThFArPBFArCaSiRnFArRnCaCaCaFArSiRnFArTiRnPMgArF")
results
q!
c
(v)
!v
v
k
idx
results
c
match_idx
e
c
match_idx
e
c
n
medicine[(match_idx+1)..-1]
medicine[match_idx+1..-1]
medicine[0...match_idx]
s
match_idx
s
medicine
c
new_grid[-2]
new_grid.count
c
new_grid[0]
q!
c
n
disp light_grid[posn[0]][posn[1]]
s
disp posn
n
s
c
disp light_grid[posn[0][posn[1]]
disp posn
neighbor_locs
n
up
r
s
line
n
line
c
q
c
lit_neighbors
light_neighbors
n
neighbor_locs
n
c
n
c
n
line
c
light_grid
down
s
light_grid
q!
C
c
q
light_grid
up
u
light_grid
c
options
string_chunk
n
string_chunk
c
best_choice(approx, ingredients)
approx
e
c
e
c
s
n
s
n
disp virtue
s
n
s
n
disp score
n
s
disp statistics[k][virtue]
disp selection[k]
disp selection[k]*statistics[k][virtue]
statistics
selection
virtue
s
approx
exit
c
approx
approx[best_for_virtue[lowest]]
best_for_virtue[lowest]
lowest
c
lowest
approx
e
exit
continue
c
statistics[k][v]
statistics[k]
selection[k]
disp virtue
disp statistics
disp selection
c
disp selection
disp k
disp virtue
c
selection
virtue
disp v
k
statistics
c
pair[1][virtue]
pair[1]
pair
s
c
disp v
k
s
n
c
continue
c
ingredients.each.first
ingredients.each
ingredients.each.sort {|k, v| v[virtue] }
ingredients
c
ingredients
c
ingredient
ingredients[ingredient]
ingredients
 Hash[COOKIE_VIRTUES.zip(match[2..6].map(&:to_i))]
c
v[virtue]
virtue
disp v[virtue]
disp v
v
s
best_for_virtue
